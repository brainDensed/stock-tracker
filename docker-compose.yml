version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8080} # Default to localhost:8080
    depends_on:
      - backend
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    ports:
      - "${PORT:-8080}:${PORT:-8080}"  # Use PORT env var, default to 8080
    environment:
      - SENDER_EMAIL=${SENDER_EMAIL}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres} # Default to postgres service name
      - POSTGRES_USER=${POSTGRES_USER:-myuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mypassword}
      - POSTGRES_DB=${POSTGRES_DB:-mydb}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432} # Default to 5432
      - REDIS_PASS=${REDIS_PASS}
      - REDIS_USER=${REDIS_USER}
      - REDIS_ADDR=${REDIS_ADDR:-redis:6379} # Default to redis:6379 if not set
      - SECRET=${SECRET}
      - URL=${URL}
      - PORT=${PORT:-8080}              # Make sure the container also knows the port
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app

  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-myuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mypassword}
      - POSTGRES_DB=${POSTGRES_DB:-mydb}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASS} # If Redis requires a password
      - REDIS_USERNAME=${REDIS_USER} # If Redis requires a username (ACL)
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data: